$date
	Tue Sep 29 15:55:02 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FIFO_bench $end
$var wire 8 ! dout [7:0] $end
$var reg 1 " clk $end
$var reg 8 # din [7:0] $end
$var reg 1 $ n_rst $end
$var reg 1 % rd_en $end
$var reg 1 & wr_en $end
$var integer 32 ' i [31:0] $end
$scope module u0 $end
$var wire 1 " clk $end
$var wire 8 ( din [7:0] $end
$var wire 1 $ n_rst $end
$var wire 1 % rd_en $end
$var wire 1 & wr_en $end
$var reg 8 ) dout [7:0] $end
$var reg 1 * empty $end
$var reg 1 + full $end
$var reg 17 , rd_addr [0:16] $end
$var reg 17 - wr_addr [0:16] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 . \data[0] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 / \data[1] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 0 \data[2] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 1 \data[3] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 2 \data[4] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 3 \data[5] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 4 \data[6] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 5 \data[7] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 6 \data[8] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 7 \data[9] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 8 \data[10] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 9 \data[11] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 : \data[12] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 ; \data[13] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 < \data[14] [7:0] $end
$upscope $end
$upscope $end
$scope module FIFO_bench $end
$scope module u0 $end
$var reg 8 = \data[15] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
b0 -
b0 ,
0+
1*
bx )
bx (
b10000 '
x&
0%
1$
bx #
0"
bx !
$end
#10
0*
b1 -
b1 .
b1 #
b1 (
1&
1"
0$
#20
0&
0"
#30
b10 -
b10 /
b10 #
b10 (
1&
1"
#40
0&
0"
#50
b11 -
b11 0
b11 #
b11 (
1&
1"
#60
0&
0"
#70
b100 -
b100 1
b100 #
b100 (
1&
1"
#80
0&
0"
#90
b101 -
b101 2
b101 #
b101 (
1&
1"
#100
0&
0"
#110
b110 -
b110 3
b110 #
b110 (
1&
1"
#120
0&
0"
#130
b111 -
b111 4
b111 #
b111 (
1&
1"
#140
0&
0"
#150
b1000 -
b1000 5
b1000 #
b1000 (
1&
1"
#160
0&
0"
#170
b1001 -
b1001 6
b1001 #
b1001 (
1&
1"
#180
0&
0"
#190
b1010 -
b1010 7
b1010 #
b1010 (
1&
1"
#200
0&
0"
#210
b1 ,
b1 !
b1 )
1%
1"
#220
0%
0"
#230
b10 ,
b10 !
b10 )
1%
1"
#240
0%
0"
#250
b11 ,
b11 !
b11 )
1%
1"
#260
0%
0"
#270
b100 ,
b100 !
b100 )
1%
1"
#280
0%
0"
#290
b101 ,
b101 !
b101 )
1%
1"
#300
0%
0"
#310
1"
#320
0"
#330
1"
#340
0"
#350
1"
#360
0"
#370
1"
#380
0"
#390
1"
#400
0"
#410
1"
#420
0"
#430
1"
#440
0"
#450
1"
#460
0"
#470
1"
#480
0"
#490
1"
#500
0"
