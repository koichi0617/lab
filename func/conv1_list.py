#命令にパラメータを与える関数
def give_params_3(command1, command2, command3):
  command_1 = command1(1, 1, 1)
  command_2 = command2(1, 1, 1)
  command_3 = command3(1, 1, 1)
  conv(command_1, command_2, command_3)

def give_params_4(command1, command2, command3, command4):
  command_1 = command1(1, 1, 1)
  command_2 = command2(1, 1, 1)
  command_3 = command3(1, 1, 1)
  command_4 = command4(1, 1, 1)
  #conv(command_1, command_2, command_3, command_4)

#指定した命令の組み合わせをまとめて出力する関数
def conv(command_1, command_2, command_3):
  # #0の記述を別ファイルからコピー
  with open('ini.mc', mode='r') as f:
    initial = f.read()
  with open(file, mode='w') as f:
    f.write(initial)
  # 命令のまとまりを出力
  commands = command_1[0] + command_2[0] + command_3[0]
  with open(file, mode='a') as f:
    f.writelines(commands)
  # #の番号を昇順にそろえる
  with open(file, mode='r') as f:
    list = f.readlines()
    i = 0
    rows = 0
    for line in list:
      if '#' in line: 
        list[rows] = '#%d\n' % i
        i += 1
      # loop先の#を指定し直す
      if 'INST_PC' in line and i > 1:
        if i <= command_1[2]:
          list[rows] = push('INST_PC', i - command_1[1] - 1, 32)
        elif i > command_1[2] and i <= command_1[2] + command_2[2]:
          list[rows] = push('INST_PC', i - command_2[1] - 1, 32)
        elif i > command_1[2] + command_2[2]:
          list[rows] = push('INST_PC', i - command_3[1] - 1, 32)
      rows += 1
  with open(file, mode='w') as f:
    f.writelines(list)

#命令のまとまり
def wbuf_send(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 7
  loop_num = 2 #loop先が何個前の#か判定
  list = []
  list.append('//send\n')
  list.append('#1\n')
  list.append(push('INST_RADDRX', addr, 16))
  list.append(push('INST_RCEBX', 0, 1))
  list.append('\n')
  list.append('//loop to here\n')
  list.append('#2\n')
  list.append(push('INST_WBUF_EN', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', row, 6))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_COUNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', loop, 16))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 2, 32))
  list.append('\n')
  list.append('#5\n')
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 1, 6))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', -1, 16))
  list.append('\n')
  list.append('#7\n')
  list.append(push('INST_RADDRX', 0, 16))
  list.append('\n')
  return list, loop_num, sharp_num

def output_send(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 7
  loop_num = 2
  list = []
  list.append('//output\n')
  list.append('#1\n')
  list.append(push('INST_WADDRX', addr, 16))
  list.append(push('INST_WADDRX_WE', 1, 1))
  list.append('\n')
  list.append('//output_send start loop to here\n')
  list.append('#2\n')
  list.append(push('INST_OUTPUT_EN', 1, 1))
  list.append(push('INST_OUTPUT_EN_CTRL', row, 6))
  list.append(push('INST_RESULT_PURGE', 0, 1))
  list.append(push('INST_WCEBX', 0, 1))
  list.append(push('INST_WADDRX', 1, 16))
  list.append(push('INST_WADDRX_WE', 0, 1))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_COUNTER0', loop, 32))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 2, 32))
  list.append('\n')
  list.append('#5\n')
  list.append(push('INST_OUTPUT_EN', 1, 1))
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append(push('INST_OUTPUT_EN_CTRL', 1, 6))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('//output_send end\n')
  list.append('\n')
  list.append('#7\n')
  list.append(push('INST_WBUF_EN_CTRL', 1, 1))
  list.append('\n')
  return list, loop_num, sharp_num

def cal_wbuf_pool(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 27
  loop_num = 8
  list = []
  list.append('//cal + wbuf_pool')
  list.append('#1\n')
  list.append(push('INST_WBUF_PURGE', 1, 16))
  list.append('\n')
  list.append('#2\n')
  list.append(push('INST_I_COMPARE_MODE', 1, 1))
  list.append(push('INST_WBUF_PURGE', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RCEBX', 0, 6))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_WBUF_EN_CTRL_WE', 0, 1))
  list.append(push('INST_I_COMPARE_REGEN', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('//RADDRX = adrs - 3\n')
  list.append('#5\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 125, 16))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_RCEBW', 0, 1))
  list.append('\n')
  list.append('//loop to here\n')
  list.append('#7\n')
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_I_COMPARE_SWITCH', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 1, 1))
  list.append(push('INST_MAC_EN', 1, 1))
  list.append('\n')
  list.append('#8\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_MAC_EN', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('//RADDRX = -(adrs - 1)\n')
  list.append('#9\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('#10\n')
  list.append(push('INST_RCEBX', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('#11\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_I_COMPARE_REGEN', 0, 0))
  list.append(push('INST_NL_EN', 0, 0))
  list.append('\n')
  list.append('#12\n')
  list.append(push('INST_RCEBX', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_I_COMPARE_EN', 1, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 1, 1))
  list.append(push('INST_MAC_EN', 1, 1))
  list.append('\n')
  list.append('#13\n')
  list.append(push('INST_WBUF_EN', 1, 1))
  list.append(push('INST_I_COMPARE_EN', 0, 1))
  list.append(push('INST_I_COMPARE_REGEN', 1, 1))
  list.append(push('INST_I_COMPARE_SWITCH', 0, 1))
  list.append(push('INST_MAC_EN', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('//COUTER0 = adrs/4\n')
  list.append('#14\n')
  list.append(push('INST_COUNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', 32, 16))
  list.append(push('INST_RADDRW', 0, 16))
  list.append('\n')
  list.append('//RADDRX = adrs - 3\n')
  list.append('#15\n')
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 2, 32))
  list.append(push('INST_RADDRX', 125, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('#16\n')
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 1, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_NL_EN', 0, 1))
  list.append('\n')
  list.append('#17\n')
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_I_COMPARE_REGEN', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_I_COMPARE_MODE', 0, 1))
  list.append(push('INST_I_COMPARE_SWITCH', 0, 1))
  list.append(push('INST_RCEBW', 1, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 0, 1))
  list.append('\n')
  list.append('#18\n')
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_RADDRW', 0, 16))
  list.append('//wbuf_pool end\n')
  list.append('#\n')
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_UNUSED', 0, 1))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 1))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 1))
  list.append('\n')
  list.append('#\n')        
  list.append(push('INST_UNUSED', 0, 1))      
  list.append('\n')
  list.append('#\n')    
  list.append(push('INST_UNUSED', 0, 1))
  list.append('\n')    
  list.append('#\n')    
  list.append(push('INST_UNUSED', 0, 1))    
  list.append('\n')    
  list.append('#\n')    
  list.append(push('INST_UNUSED', 0, 1))    
  list.append('\n')    
  list.append('#\n')    
  list.append(push('INST_UNUSED', 0, 1))    
  list.append('\n')    
  list.append('#\n')    
  list.append(push('INST_UNUSED', 0, 1))
  list.append('\n')
  return list, loop_num, sharp_num

def cal_wbuf_out(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 17
  loop_num = 3
  list = []
  list.append('//cal+wbuf+out\n')
  list.append('#1\n')
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_RCEBW', 0, 1))
  list.append(push('INST_OUTPUT_EN_CTRL_WE', 1, 1))
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RCEBX', 0, 1))
  list.append(push('INST_WBUF_PURGE', 1, 1))
  list.append('\n')
  list.append('//loop_to_here\n')
  list.append('#2\n')
  list.append(push('INST_OUTPUT_EN_CTRL_WE', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL_WE', 0, 1))
  list.append(push('INST_WCEBX', 0, 1))
  list.append(push('INST_WADDRX', 1, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 1, 1))
  list.append(push('INST_MAC_EN', 1, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_WBUF_PURGE', 0, 1))
  list.append(push('INST_WBUF_EN', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_MAC_EN', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_RADDRW', 0, 16))
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_COUNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', 32, 16))
  list.append('\n')
  list.append('#5\n')
  list.append(push('INST_WADDRX', 0, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 2, 32))
  list.append(push('INST_RCEBX', 1, 1))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_RCEBX', 0, 1))
  list.append(push('INST_WCEBX', 1, 1))
  list.append(push('INST_WADDRX', 1, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_OUTPUT_EN_CTRL', 1, 6))
  list.append(push('INST_WBUF_EN_CTRL', 1, 6))
  list.append(push('INST_NL_EN', 0, 1))
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append('\n')
  list.append('//conv_cal_loop end\n')
  list.append('#7\n')
  list.append(push('INST_WADDRX', 0, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RCEBW', 1, 1))
  list.append(push('INST_RCEBX', 1, 1))
  list.append(push('INST_NL_EN', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#8\n')
  list.append(push('INST_RADDRW', 0, 16))
  list.append(push('INST_RADDRX', 0, 16))
  list.append('//conv_cal+wbuf+out end')
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  return list, loop_num, sharp_num

def conv_cal(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 17
  loop_num = 3
  list = []
  list.append('//conv_cal\n')
  list.append('#1\n')
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_RCEBW', 0, 1))
  list.append('\n')
  list.append('//loop_to_here\n')
  list.append('#2\n')
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 1, 1))
  list.append(push('INST_MAC_EN', 1, 1))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_MAC_EN', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_RADDRW', 0, 16))
  list.append(push('INST_COUNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', 64, 16))
  list.append('\n')
  list.append('#5\n')
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 2, 32))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_NL_EN', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('//conv_cal_loop end\n')
  list.append('#7\n')
  list.append(push('INST_RCEBW', 1, 1))
  list.append(push('INST_RADDRW', 1, 1))
  list.append(push('INST_NL_EN', 0, 1))
  list.insert(-1,'\n')
  list.append('#8\n')
  list.append(push('INST_RADDRW', 0, 16))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  return list, loop_num, sharp_num

def conv_cal_wbuf(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 17
  loop_num = 3
  list = []
  list.append('//conv_cal+wbuf start\n')
  list.append('#1\n')
  list.append(push('INST_WBUF_PURGE', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL_WE', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_RCEBW', 0, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RCEBX', 0, 1))
  list.append('\n')
  list.append('//loop_to_here\n')
  list.append('#2\n')
  list.append(push('INST_WBUF_EN', 1, 1))
  list.append(push('INST_WBUF_PURGE', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL_WE', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 1, 1))
  list.append(push('INST_MA_EN', 1, 1))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_MAC_EN', 0, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_RADDRW', 0, 16))
  list.append(push('INST_COUNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', 64, 16))
  list.append('\n')
  list.append('#5\n')
  list.append(push('INST_RCEBX', 1, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 2, 32))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_RCEBX', 0, 1))
  list.append(push('INST_NL_EN', 0, 1))
  list.append(push('INST_JUMP_COUNTER0',  0, 0))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_WBUF_EN_CTRL', 1, 6))
  list.append('\n')
  list.append('//conv_cal_loop end\n')
  list.append('#7\n')
  list.append(push('INST_RCEBX', 1, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RCEBW', 1, 1))
  list.append(push('INST_RADDRW', 1, 16))
  list.append(push('INST_NL_EN', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.insert(-1,'\n')
  list.append('#8\n')
  list.append(push('INST_NL_EN', 0, 0))
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_RADDRW', 0, 16))
  list.append('//conv_cal+wbuf end\n')
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  return list, loop_num, sharp_num

def output_send_pool(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 32
  loop_num = 8
  list = []
  list.append('#1\n')
  list.append(push('INST_WADDRX', 0, 16))
  list.append(push('INST_WADDRX_WE', 1, 1))
  list.append('\n')
  list.append('//output_send_pool start\n')
  list.append('#2\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 1, 6))
  list.append('\n')
  list.append('#5\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append(push('INST_O_COMPARE_SWITCH', 1, 1))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#7\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#8\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 1, 6))
  list.append('\n')
  list.append('#9\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append(push('INST_OUTPUT_EN', 0, 1))
  list.append(push('INST_O_COMPARE_EN', 1, 1))
  list.append('\n')
  list.append('//loop to here\n')
  list.append('#10\n')
  list.append(push('INST_WCEBX', 0, 1))
  list.append(push('INST_O_COMPARE_EN', 0, 1))
  list.append(push('INST_O_COMPARE_SWITCH', 0, 1))
  list.append(push('INST_OUTPUT_EN', 0, 1))
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append(push('INST_WADDRX', 1, 16))
  list.append('\n')
  list.append('#11\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#12\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#13\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 1, 6))
  list.append('\n')
  list.append('#14\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append(push('INST_WCEBX', 1, 6))
  list.append(push('INST_WADDRX', 0, 16))
  list.append(push('INST_O_COMPARE_SWITCH', 1, 1))
  list.append('\n')
  list.append('#15\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#16\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#17\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 1, 6))
  list.append(push('INST_COUNNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', 31, 16))
  list.append('\n')
  list.append('#18\n')
  list.append(push('INST_OUTPUT_EN_CTRL', 0, 6))
  list.append(push('INST_OUTPUT_EN', 0, 1))
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 11, 32))
  list.append('\n')
  list.append('#19\n')
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append(push('INST_O_COMPARE_EN', 1, 1))
  list.append('\n')
  list.append('//loop end')
  list.append('#20\n')
  list.append(push('INST_OUTPUT_EN', 1, 1))
  list.append(push('INST_O_COMPARE_SWITCH', 0, 1))
  list.append(push('INST_O_COMPARE_EN', 0, 1))
  list.append(push('INST_WADDRX', 1, 16))
  list.append(push('INST_WCEBX', 0, 1))
  list.append('\n')
  list.append('#21\n')
  list.append(push('INST_WADDRX', 1, 16))
  list.append('\n')
  list.append('#22\n')
  list.append(push('INST_WADDRX', 1, 16))
  list.append('\n')
  list.append('#23\n')
  list.append(push('INST_WADDRX', 1, 16))
  list.append('\n')
  list.append('#24\n')
  list.append(push('INST_OUTPUT_EN', 0, 1))
  list.append(push('INST_O_COMPARE_MODE', 0, 1))
  list.append(push('INST_WADDRX', 0, 16))
  list.append(push('INST_WCEBX', 1, 1))
  list.append('\n')
  list.append('//output_send_pool\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  return list, loop_num, sharp_num

def wbuf_send_pool(addr, loop, row): #(SRAM開始アドレス、ループ回数、挿入開始列)
  sharp_num = 27
  loop_num = 8
  list = []
  list.append('//adrs = row0_depth = row1_depth\n')
  list.append('#1\n')
  list.append(push('INST_WBUF_PURGE', 1, 1))
  list.append('\n')
  list.append('//wbuf_pool start\n')
  list.append('#2\n')
  list.append(push('INST_I_COMPARE_MODE', 1, 1))
  list.append(push('INST_WBUF_PURGE', 0, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_RCEBX', 0, 1))
  list.append('\n')
  list.append('#3\n')
  list.append(push('INST_WBUF_EN_CTRL_WE', 0, 1))
  list.append(push('INST_I_COMPARE_REGEN', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('#4\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('\n')
  list.append('//RADDRX = adrs - 3\n')
  list.append('#5\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 127, 16))
  list.append('\n')
  list.append('#6\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append('\n')
  list.append('//loop to here\n')
  list.append('#7\n')
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_I_COMPARE_SWITCH', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append('\n')
  list.append('#8\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append('//RADDRX = -(adrs - 1)\n')
  list.append('\n')
  list.append('#9\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append('\n')
  list.append('#10\n')
  list.append(push('INST_RCEBX', 1, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_RADDRX', 0, 16))
  list.append('\n')
  list.append('#11\n')
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_I_COMPARE_REGEN', 0, 1))
  list.append('\n')
  list.append('#12\n')
  list.append(push('INST_RCEBX', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_I_COMPARE_EN', 1, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append('\n')
  list.append('#13\n')
  list.append(push('INST_WBUF_EN', 1, 1))
  list.append(push('INST_I_COMPARE_EN', 0, 1))
  list.append(push('INST_I_COMPARE_REGEN', 1, 1))
  list.append(push('INST_I_COMPARE_SWITCH', 0, 1))
  list.append('\n')
  list.append('//COUNTER0 = adrs/4\n')
  list.append('#14\n')
  list.append(push('INST_COUNTER0_WE', 1, 1))
  list.append(push('INST_COUNTER0', 1, 1))
  list.append('\n')
  list.append('//RADDRX = adrs - 3\n')
  list.append('#15\n')
  list.append(push('INST_COUNTER0_WE', 0, 1))
  list.append(push('INST_JUMP_COUNTER0', 1, 1))
  list.append(push('INST_PC', 7, 32))
  list.append(push('INST_RADDRX', 127, 16))
  list.append('\n')
  list.append('#16\n')
  list.append(push('INST_JUMP_COUNTER0', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 1, 6))
  list.append(push('INST_RADDRX', 1, 16))
  list.append('\n')
  list.append('#17\n')
  list.append(push('INST_WBUF_EN', 0, 1))
  list.append(push('INST_RADDRX', 1, 16))
  list.append(push('INST_I_COMPARE_REGEN', 0, 1))
  list.append(push('INST_WBUF_EN_CTRL', 0, 6))
  list.append(push('INST_I_COMPARE_MODE', 0, 1))
  list.append(push('INST_I_COMPARE_SWITCH', 0, 1))
  list.append('\n')
  list.append('#18\n')
  list.append(push('INST_RADDRX', 0, 16))
  list.append('//wbuf_pool end\n')
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_RADDRX', 0, 16))
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  list.append('#\n')
  list.append(push('INST_UNUSED', 0, 0))
  list.append('\n')
  return list, loop_num, sharp_num

#命令1行を出力
def push(state, value, width):
  space = ''
  zero  = ''
  mask = (1 << width) - 1
  if value < 0:
    binary = bin((abs(value) ^ mask) + 1)[2:]
  else:
    binary = format(value, 'b')
    for a in range(width-len(str(binary))):
      zero = zero + '0'
    binary = zero + binary
  for n in range(24-len(state)):
    space = space + ' '
  return state + space + binary +'\n'

#命令のまとまりを指定位置に挿入する関数
def insert_command(num, command): #挿入位置（#num以降に挿入）、挿入する命令のまとまり
  target = '#%d\n' % num
  rows = 0
  i = 0
  # 指定した#の行にたどり着いたら命令を出力
  with open(file, mode='r') as f:
    list = f.readlines()
    for line in list:
      rows = rows + 1
      if line == target:
        list1 = list[:rows-1]
        list2 = list[rows:]
        list_in = command(1, 1, 1)
        list_com = list1 + list_in + list2
  # #の番号を昇順にそろえる
  rows = 0
  for line in list_com:
    rows = rows + 1
    if '#' in line: 
      list_com[rows - 1] = '#%d\n' % i
      i = i + 1
  with open(file, mode='w') as f:
    f.writelines(list_com)


file = 'output.txt'
give_params_3(wbuf_send, output_send, cal_wbuf_out)
# insert_command(50, x_back)